---
parameters:
  - name: ado_targetplatform
  - name: topdesk_environment

jobs:
  - job: Snapshot
    displayName: Trigger Create Snapshot on ${{ parameters.ado_targetplatform }}
    timeoutInMinutes: 0 # Forever on on-premises agents
    pool:
      name: RadboudUMC On-premise
    steps:
      - checkout: self
      - task: PowerShell@2
        displayName: 'Create Snapshot'
        inputs:
          targetType: filePath
          filePath: '$(build.sourcesDirectory)\AdjustVM\CreateSnapshot.ps1'
          arguments: '-VMname $(form_servername) -vcusername $(vcusername) -vcpassword $(vcpassword) -targetenvironment ${{ parameters.topdesk_environment}} -ChangeNR "$(TopdeskRequest)" -requestor "$(TopdeskInitiator)" -scheduled $(form_snapshot_schedule) -snapshotTime "$(form_snapshot_time)"'
          workingDirectory: $(build.sourcesDirectory)\AdjustVM
        condition: eq(variables['form_input'], 'Create' )
      - task: PowerShell@2
        displayName: 'Remove Snapshot'
        inputs:
          targetType: filePath
          filePath: '$(build.sourcesDirectory)\AdjustVM\RemoveSnapshot.ps1'
          arguments: '-VMname $(form_servername) -vcusername $(vcusername) -vcpassword $(vcpassword) -targetenvironment ${{ parameters.topdesk_environment}} -ChangeNR $(TopdeskRequest) -scheduled $(form_snapshot_schedule)'
          workingDirectory: $(build.sourcesDirectory)\AdjustVM
        condition: eq(variables['form_input'], 'Remove' )
      - task: PowerShell@2
        displayName: 'Revert Snapshot'
        inputs:
          targetType: filePath
          filePath: '$(build.sourcesDirectory)\AdjustVM\RevertSnapshot.ps1'
          arguments: '-VMname $(form_servername) -vcusername $(vcusername) -vcpassword $(vcpassword) -targetenvironment ${{ parameters.topdesk_environment}} -ChangeNR $(TopdeskRequest) -CreateSnapshotChangeNR $(form_createsnapshot_changeNR)'
          workingDirectory: $(build.sourcesDirectory)\AdjustVM
        condition: eq(variables['form_input'], 'Revert' )
  - job: UpdateTopdesk
    dependsOn: Snapshot
    condition: always()
    variables:
      SnapshotResult: $[ dependencies.Snapshot.result ]
    pool: server
    steps:
     - task: InvokeRESTAPI@1
       displayName: 'activiteit afsluiten'
       inputs:
         connectionType: 'connectedServiceName'
         serviceConnection: 'TopDesk API'
         method: 'PATCH'
         headers: |
            {
              "Content-Type": "application/json-patch+json"
            }
         body: |
          [  
            {
               "op": "replace",
               "path": "/status",
               "value": "Afgerond"
            }
          ]
         urlSuffix: 'tas/api/operatorChangeActivities/$(TopdeskRequest)'
         waitForCompletion: 'false'
       condition: (variables['SnapshotResult'], 'Succeeded','skipped')
     - task: InvokeRESTAPI@1
       displayName: 'activiteit mislukt'
       inputs:
         connectionType: 'connectedServiceName'
         serviceConnection: 'TopDesk API'
         method: 'PATCH'
         headers: |
            {
              "Content-Type": "application/json-patch+json"
            }
         body: |
          [  
            {
               "op": "replace",
               "path": "/status",
               "value": "Reactie ontvangen"
            }
          ]
         urlSuffix: 'tas/api/operatorChangeActivities/$(TopdeskRequest)'
         waitForCompletion: 'false'
       condition: and(in(variables['SnapshotResult'], 'SucceededWithIssues'))
